import type { PriorityGroupName } from './get-priority-index'

// Adapted from
// https://github.com/yukukotani/eslint-plugin-chakra-ui/blob/dba8a50774e7b133ff9a9d3ae099202ac4d620c4/src/lib/getPriorityIndex.ts

export const defaultPriorityGroups = {
  System: ['as', 'layerStyle', 'textStyle'],
  Margin: ['margin', 'marginStart', 'marginEnd', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft'],
  Padding: ['padding', 'paddingStart', 'paddingEnd', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],
  Color: ['colorPalette', 'color', 'textColor', 'fill', 'stroke'],
  Typography: [
    'fontFamily',
    'fontSize',
    'fontWeight',
    'lineHeight',
    'letterSpacing',
    'textAlign',
    'fontStyle',
    'textTransform',
    'textDecoration',
  ],
  Width: ['width', 'minWidth', 'maxWidth'],
  Height: ['height', 'minHeight', 'maxHeight'],
  Layout: ['display', 'verticalAlign', 'overflow', 'overflowX', 'overflowY', 'blockSize', 'inlineSize'],
  Flexbox: [
    'alignItems',
    'align',
    'alignContent',
    'justifyItems',
    'justifyContent',
    'justify',
    'flexWrap',
    'wrap',
    'flexDirection',
    'flexDir',
    'direction',
    'flex',
    'flexGrow',
    'flexShrink',
    'flexBasis',
    'justifySelf',
    'alignSelf',
    'order',
  ],
  'Grid Layout': [
    'gridGap',
    'gap',
    'gridRowGap',
    'rowGap',
    'gridColumnGap',
    'columnGap',
    'gridColumn',
    'column',
    'gridRow',
    'row',
    'gridArea',
    'area',
    'gridAutoFlow',
    'autoFlow',
    'gridAutoRows',
    'autoRows',
    'gridAutoColumns',
    'autoColumns',
    'gridTemplateRows',
    'templateRows',
    'gridTemplateColumns',
    'templateColumns',
    'gridTemplateAreas',
    'templateAreas',
    'gridColumnStart',
    'gridColumnEnd',
    'gridRowStart',
    'gridRowEnd',
    'gridArea',
  ],
  Background: [
    'background',
    'backgroundColor',
    'backgroundImage',
    'backgroundSize',
    'backgroundPosition',
    'backgroundRepeat',
    'backgroundAttachment',
    'backgroundClip',
    'opacity',
  ],
  Border: [
    'border',
    'borderWidth',
    'borderStyle',
    'borderColor',
    'borderX',
    'borderY',
    'borderStart',
    'borderStartWidth',
    'borderStartStyle',
    'borderStartColor',
    'borderEnd',
    'borderEndWidth',
    'borderEndStyle',
    'borderEndColor',
    'borderTop',
    'borderTopWidth',
    'borderTopStyle',
    'borderTopColor',
    'borderRight',
    'borderRightWidth',
    'borderRightStyle',
    'borderRightColor',
    'borderBottom',
    'borderBottomWidth',
    'borderBottomStyle',
    'borderBottomColor',
    'borderLeft',
    'borderLeftWidth',
    'borderLeftStyle',
    'borderLeftColor',
  ],
  'Border Radius': [
    'borderRadius',
    'borderTopRadius',
    'borderRightRadius',
    'borderBottomRadius',
    'borderLeftRadius',
    'borderStartRadius',
    'borderEndRadius',
    'borderTopStartRadius',
    'borderTopEndRadius',
    'borderTopRightRadius',
    'borderTopLeftRadius',
    'borderBottomStartRadius',
    'borderBottomEndRadius',
    'borderBottomLeftRadius',
    'borderBottomRightRadius',
  ],
  Position: ['position', 'zIndex', 'top', 'right', 'bottom', 'left'],
  Shadow: ['textShadow', 'shadow', 'boxShadow'],
  Effects: [] as string[],
  'Other Style Props': [
    'animation',
    'appearance',
    'transform',
    'transformOrigin',
    'visibility',
    'whiteSpace',
    'userSelect',
    'pointerEvents',
    'wordBreak',
    'overflowWrap',
    'textOverflow',
    'boxSizing',
    'cursor',
    'resize',
    'transition',
    'objectFit',
    'objectPosition',
    'float',
    'outline',
  ],
  Conditions: [] as string[],
  'Arbitrary conditions': [] as string[],
  Css: ['css'],
} satisfies Record<PriorityGroupName, string[]>
